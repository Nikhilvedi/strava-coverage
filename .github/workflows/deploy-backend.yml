name: Deploy Backend to GCP Cloud Run

on:
  push:
    branches: [ main ]
    paths:
      - 'cmd/**'
      - 'internal/**'
      - 'config/**'
      - 'go.mod'
      - 'go.sum'
      - 'Dockerfile*'
      - '.github/workflows/deploy-backend.yml'
  workflow_dispatch:

env:
  PROJECT_ID: ${{ secrets.GCP_PROJECT_ID }}
  REGION: us-central1
  SERVICE_NAME: strava-coverage-backend

jobs:
  deploy:
    name: Deploy to Cloud Run
    runs-on: ubuntu-latest

    permissions:
      contents: read
      id-token: write

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Validate secrets
      run: |
        echo "âœ… Skipping secret validation - will be validated during authentication"

    - name: Authenticate to Google Cloud
      uses: google-github-actions/auth@v2
      with:
        credentials_json: ${{ secrets.GCP_SA_KEY }}
        project_id: ${{ secrets.GCP_PROJECT_ID }}

    - name: Set up Google Cloud CLI
      uses: google-github-actions/setup-gcloud@v2
      
    - name: Verify authentication
      run: |
        echo "Checking authentication..."
        gcloud auth list
        echo "Checking project configuration..."
        gcloud config get-value project

    - name: Configure Docker for Artifact Registry
      run: gcloud auth configure-docker us-central1-docker.pkg.dev

    - name: Build and push Docker image
      run: |
        # Build the image
        docker build -f Dockerfile.production -t us-central1-docker.pkg.dev/$PROJECT_ID/strava-coverage/$SERVICE_NAME:$GITHUB_SHA .
        
        # Push to Artifact Registry
        docker push us-central1-docker.pkg.dev/$PROJECT_ID/strava-coverage/$SERVICE_NAME:$GITHUB_SHA
        
        # Tag as latest
        docker tag us-central1-docker.pkg.dev/$PROJECT_ID/strava-coverage/$SERVICE_NAME:$GITHUB_SHA us-central1-docker.pkg.dev/$PROJECT_ID/strava-coverage/$SERVICE_NAME:latest
        docker push us-central1-docker.pkg.dev/$PROJECT_ID/strava-coverage/$SERVICE_NAME:latest

    - name: Verify secrets and resources
      run: |
        echo "Checking if secrets exist..."
        gcloud secrets describe strava-client-id --project=$PROJECT_ID || echo "strava-client-id secret missing"
        gcloud secrets describe strava-client-secret --project=$PROJECT_ID || echo "strava-client-secret secret missing"
        gcloud secrets describe strava-redirect-uri --project=$PROJECT_ID || echo "strava-redirect-uri secret missing"
        gcloud secrets describe database-connection --project=$PROJECT_ID || echo "database-connection secret missing"
        
        echo "Checking Cloud SQL instance..."
        INSTANCE_NAME=$(echo "${{ secrets.CLOUDSQL_INSTANCE }}" | cut -d':' -f3)
        gcloud sql instances describe $INSTANCE_NAME --project=$PROJECT_ID || echo "Cloud SQL instance not found"
        echo "Cloud SQL connection string: ${{ secrets.CLOUDSQL_INSTANCE }}"

    - name: Deploy to Cloud Run (Basic)
      run: |
        echo "Deploying Cloud Run service with database connection..."
        gcloud run deploy $SERVICE_NAME \
          --image us-central1-docker.pkg.dev/$PROJECT_ID/strava-coverage/$SERVICE_NAME:$GITHUB_SHA \
          --region $REGION \
          --platform managed \
          --allow-unauthenticated \
          --port 8080 \
          --memory 512Mi \
          --cpu 1 \
          --max-instances 10 \
          --timeout 300 \
          --set-env-vars GIN_MODE=release \
          --set-secrets DB_URL=database-connection:latest \
          --add-cloudsql-instances ${{ secrets.CLOUDSQL_INSTANCE }} \
          --project $PROJECT_ID

    - name: Update with Strava API Secrets
      run: |
        echo "Adding Strava API secrets..."
        gcloud run services update $SERVICE_NAME \
          --region $REGION \
          --update-secrets STRAVA_CLIENT_ID=strava-client-id:latest \
          --update-secrets STRAVA_CLIENT_SECRET=strava-client-secret:latest \
          --update-secrets STRAVA_REDIRECT_URI=strava-redirect-uri:latest \
          --project $PROJECT_ID

    - name: Get service URL
      run: |
        SERVICE_URL=$(gcloud run services describe $SERVICE_NAME --region=$REGION --format='value(status.url)' --project=$PROJECT_ID)
        echo "Service deployed to: $SERVICE_URL"
        echo "SERVICE_URL=$SERVICE_URL" >> $GITHUB_ENV

    - name: Run smoke test
      run: |
        # Wait a moment for deployment to be ready
        sleep 10
        
        # Test health endpoint
        curl -f $SERVICE_URL/api/health || exit 1
        echo "Health check passed!"