name: Deploy Backend to GCP Cloud Run

on:
  push:
    branches: [ main ]
    paths:
      - 'cmd/**'
      - 'internal/**'
      - 'config/**'
      - 'go.mod'
      - 'go.sum'
      - 'Dockerfile*'
      - '.github/workflows/deploy-backend.yml'
  workflow_dispatch:

env:
  PROJECT_ID: ${{ secrets.GCP_PROJECT_ID }}
  REGION: us-central1
  SERVICE_NAME: strava-coverage-backend

jobs:
  deploy:
    name: Deploy to Cloud Run
    runs-on: ubuntu-latest

    permissions:
      contents: read
      id-token: write

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Validate secrets
      env:
        GCP_PROJECT_ID: ${{ secrets.GCP_PROJECT_ID }}
        GCP_SA_KEY: ${{ secrets.GCP_SA_KEY }}
        CLOUDSQL_INSTANCE: ${{ secrets.CLOUDSQL_INSTANCE }}
      run: |
        echo "Checking required secrets..."
        
        # Check if secrets are set using environment variables
        if [ -z "$GCP_PROJECT_ID" ]; then
          echo "❌ GCP_PROJECT_ID secret is not set"
          exit 1
        fi
        
        if [ -z "$GCP_SA_KEY" ]; then
          echo "❌ GCP_SA_KEY secret is not set"
          exit 1
        fi
        
        if [ -z "$CLOUDSQL_INSTANCE" ]; then
          echo "❌ CLOUDSQL_INSTANCE secret is not set"
          exit 1
        fi
        
        echo "✅ Required secrets are present"
        
        # Validate JSON format using environment variable
        echo "Validating GCP_SA_KEY format..."
        if echo "$GCP_SA_KEY" | jq empty > /dev/null 2>&1; then
          echo "✅ GCP_SA_KEY is valid JSON"
        else
          echo "❌ GCP_SA_KEY is not valid JSON format"
          exit 1
        fi
        
        echo "✅ All secret validations passed"

    - name: Authenticate to Google Cloud
      uses: google-github-actions/auth@v2
      with:
        credentials_json: ${{ secrets.GCP_SA_KEY }}
        project_id: ${{ secrets.GCP_PROJECT_ID }}

    - name: Set up Google Cloud CLI
      uses: google-github-actions/setup-gcloud@v2
      
    - name: Verify authentication
      run: |
        echo "Checking authentication..."
        gcloud auth list
        echo "Checking project configuration..."
        gcloud config get-value project

    - name: Configure Docker for GCR
      run: gcloud auth configure-docker

    - name: Build and push Docker image
      run: |
        # Build the image
        docker build -f Dockerfile.production -t gcr.io/$PROJECT_ID/$SERVICE_NAME:$GITHUB_SHA .
        
        # Push to Google Container Registry
        docker push gcr.io/$PROJECT_ID/$SERVICE_NAME:$GITHUB_SHA
        
        # Tag as latest
        docker tag gcr.io/$PROJECT_ID/$SERVICE_NAME:$GITHUB_SHA gcr.io/$PROJECT_ID/$SERVICE_NAME:latest
        docker push gcr.io/$PROJECT_ID/$SERVICE_NAME:latest

    - name: Deploy to Cloud Run
      run: |
        gcloud run deploy $SERVICE_NAME \
          --image gcr.io/$PROJECT_ID/$SERVICE_NAME:$GITHUB_SHA \
          --region $REGION \
          --platform managed \
          --allow-unauthenticated \
          --port 8080 \
          --memory 512Mi \
          --cpu 1 \
          --max-instances 10 \
          --set-env-vars GIN_MODE=release \
          --set-secrets STRAVA_CLIENT_ID=strava-client-id:latest \
          --set-secrets STRAVA_CLIENT_SECRET=strava-client-secret:latest \
          --set-secrets STRAVA_REDIRECT_URI=strava-redirect-uri:latest \
          --set-secrets DB_URL=database-connection:latest \
          --add-cloudsql-instances ${{ secrets.CLOUDSQL_INSTANCE }} \
          --project $PROJECT_ID

    - name: Get service URL
      run: |
        SERVICE_URL=$(gcloud run services describe $SERVICE_NAME --region=$REGION --format='value(status.url)' --project=$PROJECT_ID)
        echo "Service deployed to: $SERVICE_URL"
        echo "SERVICE_URL=$SERVICE_URL" >> $GITHUB_ENV

    - name: Run smoke test
      run: |
        # Wait a moment for deployment to be ready
        sleep 10
        
        # Test health endpoint
        curl -f $SERVICE_URL/api/health || exit 1
        echo "Health check passed!"